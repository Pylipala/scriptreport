<!--@
sr.engine.importExtension("qt.core");
sr.engine.importExtension("qt.gui");
-->

<!--@ // AnalogClock class
function AnalogClock(parent) {
    QWidget.call(this, parent);

    var timer = new QTimer(this);
    timer.timeout.connect(this, "update()");
    timer.start(1000);

    this.setWindowTitle("Analog Clock");
    this.resize(200, 200);
}

AnalogClock.prototype = new QWidget();

AnalogClock.prototype.paintEvent = function() {
    var side = Math.min(this.width, this.height);
    var time = new Date();

    var painter = new QPainter();
    painter.begin(this);
    painter.setRenderHint(QPainter.Antialiasing);
    painter.translate(this.width / 2, this.height / 2);
    painter.scale(side / 200.0, side / 200.0);

    painter.setPen(new QPen(Qt.NoPen));
    painter.setBrush(new QBrush(AnalogClock.hourColor));

    painter.save();
    painter.rotate(30.0 * ((time.getHours() + time.getMinutes() / 60.0)));
    painter.drawConvexPolygon(AnalogClock.hourHand);
    painter.drawLine(0, 0, 100, 100);
    painter.restore();

    painter.setPen(AnalogClock.hourColor);

    for (var i = 0; i < 12; ++i) {
        painter.drawLine(88, 0, 96, 0);
        painter.rotate(30.0);
    }

    painter.setPen(new QPen(Qt.NoPen));
    painter.setBrush(new QBrush(AnalogClock.minuteColor));

    painter.save();
    painter.rotate(6.0 * (time.getMinutes() + time.getSeconds() / 60.0));
    painter.drawConvexPolygon(AnalogClock.minuteHand);
    painter.restore();

    painter.setPen(AnalogClock.minuteColor);

    for (var j = 0; j < 60; ++j) {
        if ((j % 5) != 0)
	   painter.drawLine(92, 0, 96, 0);
        painter.rotate(6.0);
    }
    painter.end();
};

AnalogClock.hourColor = new QColor(127, 0, 127);

AnalogClock.minuteColor = new QColor(0, 127, 127, 191);

AnalogClock.hourHand = new QPolygon([new QPoint(7, 8),
                                     new QPoint(-7, 8),
                                     new QPoint(0, -40)]);
AnalogClock.minuteHand = new QPolygon([new QPoint(7, 8),
                                       new QPoint(-7, 8),
                                       new QPoint(0, -70)]);
-->

<!--@ // Create the AnalogClockWidget
var analogClock = new AnalogClock();
analogClock.setAttribute(Qt.WA_NoSystemBackground);
-->
<h1><center>Current time</center></h1>
<p>
<center>
<img src="${analogClock}" /> <!-- Note that analogClock is a QWidget -->
</center>
</p>

<!--@ // Draw a polygon
var points = new QPolygon();
points.append(new QPoint(10, 80));
points.append(new QPoint(20, 10));
points.append(new QPoint(80, 30));
points.append(new QPoint(90, 70));

var linearGradient = new QLinearGradient(0, 0, 100, 100);
linearGradient.setColorAt(0.0, new QColor(Qt.white));
linearGradient.setColorAt(0.2, new QColor(Qt.green));
linearGradient.setColorAt(1.0, new QColor(Qt.black));

var pixmap = new QPixmap(100,100);
pixmap.fill(new QColor(0,0,0,0));

var painter = new QPainter();
painter.begin(pixmap);

painter.setRenderHint(QPainter.Antialiasing, true);
painter.setPen(Qt.DashLine);
painter.setBrush(new QBrush(linearGradient));

painter.drawPolygon(points);

painter.end();

var src = sr.report.addImageResource(pixmap); // Register the pixmap as an image, 
                                              // return the generated url of the image
-->
<p>
<center>
<!-- Display the drawn image three times -->
<img src="${src}" />
<img src="${src}" />
<img src="${src}" />
</center>
</p>